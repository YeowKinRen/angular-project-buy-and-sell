package com.example.buy_and_sell.controller;

import com.example.buy_and_sell.entity.Message;
import com.example.buy_and_sell.repository.ListingRepository;
import com.example.buy_and_sell.repository.MessageRepository;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.FirebaseToken;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/messages")
public class MessageController {

	private final MessageRepository messageRepository;
	private final FirebaseAuth firebaseAuth; // from Firebase Admin SDK

	@Autowired
	public MessageController(MessageRepository messageRepository, FirebaseAuth firebaseAuth) {
		this.messageRepository = messageRepository;
		this.firebaseAuth = firebaseAuth;
	}

	@GetMapping("/{listingId}")
	public ResponseEntity<List<Message>> getMessagesByListingId(@PathVariable String listingId) {
		List<Message> messages = messageRepository.findByListingIdOrderByTimestampDesc(listingId);

		return ResponseEntity.ok(messages);
	}
	
	@GetMapping("/")
	public ResponseEntity<List<Message>> getMessagesByListingIds(@RequestParam List<String> listingIds) {
		List<Message> messages = messageRepository.findByListingIdInOrderByTimestampDesc(listingIds);

		return ResponseEntity.ok(messages);
	}

	@GetMapping("/history")
	public ResponseEntity<List<Message>> getMessageHistory(@RequestParam String conversationId) {
		List<Message> messages = messageRepository
				.findByConversationIdOrderByTimestampAsc(conversationId);
		return ResponseEntity.ok(messages);
	}

	@PostMapping("/send")
	public ResponseEntity<Message> sendMessage(@RequestHeader("authtoken") String token, @RequestBody Message message) {
		try {
			// Verify Firebase token
			FirebaseToken user = firebaseAuth.verifyIdToken(token);
			String userId = user.getUid();
			String uuid = UUID.randomUUID().toString();
			message.setId(uuid);
			if (message.getConversationId() == null) {
				message.setConversationId(uuid);
			}
			Message savedMessage = messageRepository.save(message);
			return ResponseEntity.ok(savedMessage);

		} catch (FirebaseAuthException e) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
		}
	}

}
