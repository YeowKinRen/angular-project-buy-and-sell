package com.example.buy_and_sell.controller;

import com.example.buy_and_sell.entity.Listing;
import com.example.buy_and_sell.exception.UnauthorizedException;
import com.example.buy_and_sell.repository.ListingRepository;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.FirebaseToken;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/listings")
public class ListingController {

    private final ListingRepository listingRepository;
    private final FirebaseAuth firebaseAuth; // from Firebase Admin SDK

    @Autowired
    public ListingController(ListingRepository listingRepository, FirebaseAuth firebaseAuth) {
        this.listingRepository = listingRepository;
        this.firebaseAuth = firebaseAuth;
    }

    @GetMapping
    public List<Listing> getAllListings() {
    	List<Listing> allListing = listingRepository.findAll();
    	System.out.println(allListing);
        return allListing;
    }
    
    @GetMapping("/{userId}/listings")
    public ResponseEntity<List<Listing>> getUserListings(
        @RequestHeader("authtoken") String token,
        @PathVariable String userId
    ) {
        try {
            // Verify token and check user ID match
            verifyTokenMatchesUserId(token, userId);

            // Query listings for userId
            List<Listing> listings = listingRepository.findByUserId(userId);
            return ResponseEntity.ok(listings);

        } catch (UnauthorizedException e) {
            // Custom exception for user ID mismatch
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        } catch (FirebaseAuthException e) {
            // Token verification failed
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }
    

    @GetMapping("/{id}")
    public Optional<Listing> getListingById(@PathVariable String id) {
        return listingRepository.findById(id);
    }

    @PostMapping
    public Listing createListing(@RequestBody Listing listing) {
        return listingRepository.save(listing);
    }
    
    @PostMapping
    public ResponseEntity<List<Listing>> createNewListing(
        @RequestHeader("authtoken") String token,
        @RequestBody Listing listing
    ) {
        try {
            // Verify token and check user ID match
            verifyTokenMatchesUserId(token, listing.getUserId());

            // Query listings for userId
            Listing savedListing = listingRepository.save(listing);
            return ResponseEntity.ok(savedListing);

        } catch (UnauthorizedException e) {
            // Custom exception for user ID mismatch
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        } catch (FirebaseAuthException e) {
            // Token verification failed
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }
    
    @PutMapping("/{id}")
    public Listing updateListing(@PathVariable String id, @RequestBody Listing updatedListing,
                                 @RequestHeader("Authorization") String authToken) throws FirebaseAuthException {

        verifyTokenMatchesUserId(authToken, updatedListing.getUserId());

        return listingRepository.findById(id)
            .map(listing -> {
                listing.setName(updatedListing.getName());
                listing.setDescription(updatedListing.getDescription());
                listing.setPrice(updatedListing.getPrice());
                return listingRepository.save(listing);
            })
            .orElseThrow(() -> new RuntimeException("Listing not found with id: " + id));
    }


    /**
     * Verifies that the Firebase token is valid and matches the provided userId.
     * Throws UnauthorizedException if the user IDs do not match.
     * Throws FirebaseAuthException if token verification fails.
     */
    private void verifyTokenMatchesUserId(String authToken, String userId) throws FirebaseAuthException {
        if (authToken == null || authToken.isBlank()) {
            throw new IllegalArgumentException("Auth token is missing");
        }
        FirebaseToken decodedToken = firebaseAuth.verifyIdToken(authToken);
        String authenticatedUserId = decodedToken.getUid();

        if (!authenticatedUserId.equals(userId)) {
            throw new UnauthorizedException("Users can only access their own data");
        }
    }


	@DeleteMapping("/{id}")
    public void deleteListing(@PathVariable String id) {
        listingRepository.deleteById(id);
    }
}
