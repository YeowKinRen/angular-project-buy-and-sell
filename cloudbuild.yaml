steps:
  # Step 1: Build Angular frontend
  - name: node:18
    dir: buy-and-sell/
    entrypoint: bash
    secretEnv:
      - FIREBASE_API_KEY
      - FIREBASE_AUTH_DOMAIN
      - FIREBASE_PROJECT_ID
      - FIREBASE_STORAGE_BUCKET
      - FIREBASE_MSG_SENDER_ID
      - FIREBASE_APP_ID
      - FIREBASE_MEASUREMENT_ID
    args:
      - -c
      - |
          echo "Creating environment.ts"
          mkdir -p src/environments
          echo "export const environment = {" > src/environments/environment.ts
          echo "  production: false," >> src/environments/environment.ts
          echo "  firebase: {" >> src/environments/environment.ts
          echo "    apiKey: \"${FIREBASE_API_KEY}\"," >> src/environments/environment.ts
          echo "    authDomain: \"${FIREBASE_AUTH_DOMAIN}\"," >> src/environments/environment.ts
          echo "    projectId: \"${FIREBASE_PROJECT_ID}\"," >> src/environments/environment.ts
          echo "    storageBucket: \"${FIREBASE_STORAGE_BUCKET}\"," >> src/environments/environment.ts
          echo "    messagingSenderId: \"${FIREBASE_MSG_SENDER_ID}\"," >> src/environments/environment.ts
          echo "    appId: \"${FIREBASE_APP_ID}\"," >> src/environments/environment.ts
          echo "    measurementId: \"${FIREBASE_MEASUREMENT_ID}\"" >> src/environments/environment.ts
          echo "  }" >> src/environments/environment.ts
          echo "};" >> src/environments/environment.ts
          npm install -g @angular/cli
          npm install
          ng build

  # Step 2: Build Spring Boot app
  - name: 'gcr.io/cloud-builders/mvn'
    dir: java-backend/buy-and-sell
    args: ['clean', 'package', '-DskipTests']

  # Step 3: Copy Angular dist into Spring Boot static resources
  - name: 'gcr.io/cloud-builders/bash'
    args:
      - -c
      - |
          cp -r buy-and-sell/dist/browser/* java-backend/buy-and-sell/src/main/resources/static/

  # Step 4: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/buy-and-sell-app', 'java-backend/buy-and-sell']

  # Step 5: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/buy-and-sell-app']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args:
      - 'gcloud'
      - 'run'
      - 'deploy'
      - 'buy-and-sell-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/buy-and-sell-app'
      - '--region'
      - 'asia-southeast1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

images:
  - gcr.io/$PROJECT_ID/buy-and-sell-app

options:
  logging: CLOUD_LOGGING_ONLY

secrets:
- secretEnv:
    FIREBASE_API_KEY: projects/$PROJECT_ID/secrets/FIREBASE_API_KEY/versions/latest
    FIREBASE_AUTH_DOMAIN: projects/$PROJECT_ID/secrets/FIREBASE_AUTH_DOMAIN/versions/latest
    FIREBASE_PROJECT_ID: projects/$PROJECT_ID/secrets/FIREBASE_PROJECT_ID/versions/latest
    FIREBASE_STORAGE_BUCKET: projects/$PROJECT_ID/secrets/FIREBASE_STORAGE_BUCKET/versions/latest
    FIREBASE_MSG_SENDER_ID: projects/$PROJECT_ID/secrets/FIREBASE_MSG_SENDER_ID/versions/latest
    FIREBASE_APP_ID: projects/$PROJECT_ID/secrets/FIREBASE_APP_ID/versions/latest
    FIREBASE_MEASUREMENT_ID: projects/$PROJECT_ID/secrets/FIREBASE_MEASUREMENT_ID/versions/latest
